@startuml

package "org.projet.analyzer" {
    class TextAnalyzer {
        - result: AnalysisResult
        - executor: ExecutorService
        + TextAnalyzer()
        + analyzeText(text: String): void
        + analyzeTexts(texts: List<String>): void
        + getFrequency(ngram: String): long
        + getPercentage(ngram: String): double
        + getTotalCharacters(): long
        + shutdown(): void
    }

    class AnalysisResult {
        - ngramCounts: ConcurrentHashMap<String, Long>
        - totalCharacters: AtomicLong
        + AnalysisResult()
        + addToTotalCharacters(count: long): void
        + incrementNGramCount(ngram: String): void
        + getNGramCount(ngram: String): long
        + getTotalCharacters(): long
    }

    class TextLoader {
        + {static} loadFromDirectory(directory: Path): List<String>
        + {static} analyzeDirectory(analyzer: TextAnalyzer, directory: Path): void
    }

    class AccentAnalyzer {
        - keySequences: Map<Character, String>
        - textAnalyzer: TextAnalyzer
        + AccentAnalyzer(textAnalyzer: TextAnalyzer)
        + analyzeText(text: String): void
        + getKeySequence(c: char): String
        + isAccented(c: char): boolean
    }

    TextAnalyzer --> AnalysisResult
    AccentAnalyzer --> TextAnalyzer
}

package "org.projet.evaluator" {
    class LayoutEvaluator {
        - frequencies: Map<String, Long>
        + LayoutEvaluator(frequencies: Map<String, Long>)
        + evaluateLayout(layout: KeyboardLayout): double
        + displayEvaluation(layout: KeyboardLayout): void
    }
}

package "org.projet.optimizer" {
    class KeyboardOptimizer {
        - evaluator: LayoutEvaluator
        + KeyboardOptimizer(evaluator: LayoutEvaluator)
        + optimize(layout: KeyboardLayout): KeyboardLayout
    }
}

package "org.projet.config" {
    class KeyboardConfigLoader {
        + loadLayout(path: Path): Optional<KeyboardLayout>
    }

    class KeyboardLayout {
        - keys: Map<String, Key>
        + getKey(position: String): Optional<Key>
        + getKeys(): Map<String, Key>
        + setKey(position: String, key: Key): void
    }

    class Key {
        - character: String
        - type: KeyType
        + getCharacter(): String
        + getType(): KeyType
    }

    enum KeyType {
        LETTER
        NUMBER
        SYMBOL
        MODIFIER
        SPECIAL
    }

    KeyboardLayout --> "many" Key
    Key --> KeyType
}

LayoutEvaluator --> KeyboardLayout
KeyboardOptimizer --> LayoutEvaluator
KeyboardConfigLoader --> KeyboardLayout

@enduml
