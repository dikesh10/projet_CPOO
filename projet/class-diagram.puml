@startuml

package org.projet {
    class App {
        + main(args: String[]): void
        - analyzeTexts(directory: Path): TextAnalyzer
        - evaluateLayout(layout: KeyboardLayout): double
        - optimizeLayout(layout: KeyboardLayout): KeyboardLayout
        - saveFrequenciesToFile(analyzer: TextAnalyzer, filename: String, ngramLength: int): void
    }
}

package org.projet.analyzer {
    class TextAnalyzer {
        - frequencies: Map<String, Long>
        - totalCharacters: long
        - executor: ExecutorService
        + analyzeText(text: String): void
        + analyzeTexts(texts: List<String>): void
        + getFrequency(ngram: String): long
        + getAllFrequencies(): Map<String, Long>
        + getTotalCharacters(): long
        + shutdown(): void
    }

    class AccentAnalyzer {
        - {static} ACCENT_MAP: Map<Character, String>
        + {static} decompose(text: String): String
        + {static} getKeySequence(c: char): String
    }
}

package org.projet.model {
    class KeyboardLayout {
        - name: String
        - characterToKeyMap: Map<Character, Key>
        + name(): String
        + characterToKeyMap(): Map<Character, Key>
        + copy(): KeyboardLayout
        + swapKeys(char1: char, char2: char): KeyboardLayout
    }

    class Key {
        - row: int
        - column: int
        - finger: Finger
        - shiftProduces: Character
        - altgrProduces: Character
        + row(): int
        + column(): int
        + finger(): Finger
        + shiftProduces(): Character
        + altgrProduces(): Character
    }

    enum Finger {
        LEFT_PINKY
        LEFT_RING
        LEFT_MIDDLE
        LEFT_INDEX
        RIGHT_INDEX
        RIGHT_MIDDLE
        RIGHT_RING
        RIGHT_PINKY
    }

    class KeyboardDisplay {
        + {static} displayLayout(layout: KeyboardLayout): void
        + {static} displayChanges(original: KeyboardLayout, optimized: KeyboardLayout): void
    }
}

package org.projet.evaluator {
    class LayoutEvaluator {
        - ngramFrequencies: Map<String, Long>
        - movementEvaluator: MovementEvaluator
        - movementCounts: Map<MovementType, Long>
        - fingerLoads: Map<Finger, Double>
        + evaluateLayout(layout: KeyboardLayout): double
        + displayEvaluation(layout: KeyboardLayout): void
        - evaluateBigram(layout: KeyboardLayout, bigram: String, frequency: long): double
        - evaluateTrigram(layout: KeyboardLayout, trigram: String, frequency: long): double
        - calculateFingerLoadScore(): double
    }

    class MovementEvaluator {
        - {static} MOVEMENT_WEIGHTS: Map<MovementType, Double>
        + evaluateMovement(key1: Key, key2: Key): MovementType
        + evaluateTrigramMovement(key1: Key, key2: Key, key3: Key): MovementType
        + getWeight(type: MovementType): double
    }

    enum MovementType {
        SAME_FINGER
        LATERAL_EXTENSION
        SCISSORS
        HAND_ALTERNATION
        INWARD_ROLL
        OUTWARD_ROLL
        BAD_REDIRECTION
        REDIRECTION
        SKIPGRAM_SAME_FINGER
    }
}

package org.projet.optimizer {
    class KeyboardOptimizer {
        - evaluator: LayoutEvaluator
        - random: Random
        - populationSize: int
        - maxGenerations: int
        - mutationRate: double
        - crossoverRate: double
        + optimize(initial: KeyboardLayout): KeyboardLayout
        - initializePopulation(initial: KeyboardLayout): List<KeyboardLayout>
        - selectParent(population: List<KeyboardLayout>, scores: Map<KeyboardLayout, Double>): KeyboardLayout
        - crossover(parent1: KeyboardLayout, parent2: KeyboardLayout): List<KeyboardLayout>
        - mutate(layout: KeyboardLayout): KeyboardLayout
    }
}

' Relations
App --> TextAnalyzer
App --> LayoutEvaluator
App --> KeyboardOptimizer
App --> KeyboardDisplay

TextAnalyzer --> AccentAnalyzer

KeyboardLayout --> Key
Key --> Finger

KeyboardOptimizer --> LayoutEvaluator
LayoutEvaluator --> MovementEvaluator
MovementEvaluator --> MovementType

@enduml
