@startuml

package org.projet {
    class App {
        + main(args: String[]): void
        - analyzeTexts(directory: Path): void
        - evaluateLayout(layout: KeyboardLayout): void
        - optimizeLayout(layout: KeyboardLayout): void
        - displayResults(): void
    }
}

package org.projet.analyzer {
    class TextAnalyzer {
        - characterFrequencies: Map<Character, Integer>
        - bigramFrequencies: Map<String, Integer>
        - trigramFrequencies: Map<String, Integer>
        - totalCharacters: int
        + analyzeText(text: String): void
        + getCharacterFrequency(c: Character): int
        + getBigramFrequency(bigram: String): int
        + getTrigramFrequency(trigram: String): int
        + getTotalCharacters(): int
        + getCharacterPercentage(c: Character): double
        + getBigramPercentage(bigram: String): double
        + getTrigramPercentage(trigram: String): double
    }

    class TextLoader {
        + {static} loadText(path: Path): String
        + {static} loadFromDirectory(dir: Path): List<String>
    }
}

package org.projet.config {
    class KeyboardConfigLoader {
        - mapper: ObjectMapper
        + loadLayout(configFile: Path): Optional<KeyboardLayout>
    }

    class KeyboardConfig {
        - name: String
        - description: String
        - keys: Map<Character, KeyConfig>
        + getName(): String
        + getDescription(): String
        + getKeys(): Map<Character, KeyConfig>
    }

    class KeyConfig {
        - row: int
        - column: int
        - finger: String
        - shiftProduces: String
        - altgrProduces: String
        + getRow(): int
        + getColumn(): int
        + getFinger(): String
        + getShiftProduces(): String
        + getAltgrProduces(): String
    }
}

package org.projet.model {
    class KeyboardLayout {
        - name: String
        - characterToKeyMap: Map<Character, Key>
        + name(): String
        + characterToKeyMap(): Map<Character, Key>
    }

    class Key {
        - row: int
        - column: int
        - finger: Finger
        - shiftProduces: Character
        - altgrProduces: Character
        + row(): int
        + column(): int
        + finger(): Finger
        + shiftProduces(): Character
        + altgrProduces(): Character
    }

    enum Finger {
        LEFT_PINKY
        LEFT_RING
        LEFT_MIDDLE
        LEFT_INDEX
        RIGHT_INDEX
        RIGHT_MIDDLE
        RIGHT_RING
        RIGHT_PINKY
    }

    enum Hand {
        LEFT
        RIGHT
    }
}

package org.projet.evaluator {
    class LayoutEvaluator {
        - textAnalyzer: TextAnalyzer
        - weights: Map<String, Double>
        + evaluate(layout: KeyboardLayout): double
        - evaluateBigrams(layout: KeyboardLayout): double
        - evaluateTrigrams(layout: KeyboardLayout): double
        - calculateFingerLoads(layout: KeyboardLayout): Map<Finger, Double>
        - isSameFinger(key1: Key, key2: Key): boolean
        - isLateralExtension(key1: Key, key2: Key): boolean
        - isHandAlternation(key1: Key, key2: Key): boolean
        - isInwardRoll(key1: Key, key2: Key): boolean
        - isOutwardRoll(key1: Key, key2: Key): boolean
    }
}

package org.projet.optimizer {
    class KeyboardOptimizer {
        - evaluator: LayoutEvaluator
        - currentLayout: KeyboardLayout
        + optimize(layout: KeyboardLayout): KeyboardLayout
        - swapKeys(layout: KeyboardLayout, key1: Character, key2: Character): KeyboardLayout
        - findBestSwap(layout: KeyboardLayout): Pair<Character, Character>
    }
}

' Relations
App --> TextAnalyzer
App --> LayoutEvaluator
App --> KeyboardOptimizer
App --> KeyboardConfigLoader

TextAnalyzer --> TextLoader

KeyboardConfigLoader --> KeyboardConfig
KeyboardConfig --> KeyConfig
KeyboardConfig ..> KeyboardLayout

KeyboardLayout --> Key
Key --> Finger
Finger --> Hand

KeyboardOptimizer --> LayoutEvaluator
LayoutEvaluator --> TextAnalyzer

@enduml
